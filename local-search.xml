<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>对TEMPEST代码的研究（一）</title>
    <link href="/2025/03/24/%E5%AF%B9TEMPEST%E4%BB%A3%E7%A0%81%E7%9A%84%E7%A0%94%E7%A9%B6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/03/24/%E5%AF%B9TEMPEST%E4%BB%A3%E7%A0%81%E7%9A%84%E7%A0%94%E7%A9%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="对TEMPEST代码的研究（一）"><a href="#对TEMPEST代码的研究（一）" class="headerlink" title="对TEMPEST代码的研究（一）"></a>对TEMPEST代码的研究（一）</h1><p>项目地址：<a href="https://github.com/Teach2Breach/Tempest">Teach2Breach&#x2F;Tempest: A command and control framework written in rust.</a></p><p>Tempest 是一个完全由 rust 编写的研究性 C2，作者在项目介绍中提到，该项目并未借鉴其它框架，是以该项目生成的 shellcode 或许可以与 cobalt strike 生成的 shellcode 进行对比学习</p><p>Tempest 的组件分为如下三部分：服务器，客户端，代理&#x2F;植入物<br>顺便一提，由于笔者对于 linux 以及 mac 不甚精通，目前的研究仅限于 Windows 部分的分析</p><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p><strong>Anvil</strong> - 服务器</p><ul><li>2 个带有 API 的服务器。所有 API 都经过身份验证，并且不支持 unauth-discovery。</li><li>SQLite 本地数据库</li><li>内部功能（构建 IMPS、生成 shellCode 等）</li></ul><p><strong>Conduit</strong> - 黑客客户端</p><ul><li>终端用户界面 （TUI）</li><li>“实时”仪表板显示</li><li>便携，完全在终端中运行</li></ul><p><strong>IMPS</strong> - 信标&#x2F;代理&#x2F;植入物<br>Windows 功能：</p><ul><li>通过 TLS 的 AES 加密通信</li><li>专注于 OPSEC，功能丰富（无膨胀）</li><li>远程进程注入</li><li>Bof 支持</li><li>.DOTNET 可执行文件支持</li><li>WMI</li><li>TEB 步行 “noldr”</li></ul><h2 id="服务器-anvil"><a href="#服务器-anvil" class="headerlink" title="服务器-anvil"></a>服务器-anvil</h2><p>当前配置为 2 个不同端口（443，8443），在 <code>config.toml</code> 中进行配置，443 被用于植入物，目前不支持关闭侦听器，处于默认打开状态。此外，初始访问使用的是 HTTPS 协议，其它协议有待拓展</p><p>anvil 服务器使用 config.toml 进行配置，用户可在其中定义自己的用户名和密码进行验证或其它操作（如 LITCRYPT 密钥）。服务器还需要本地存储的 TLS 证书才能通过 HTTPS 提供内容</p><p><code>config.toml</code> 文件示例</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust">[[users]]<br>username = <span class="hljs-string">&quot;forge&quot;</span><br>password = <span class="hljs-string">&quot;forge&quot;</span><br><br>[[users]]<br>username = <span class="hljs-string">&quot;adversary&quot;</span><br>password = <span class="hljs-string">&quot;pwd1&quot;</span><br><br>[cert]<br>private_key = <span class="hljs-string">&quot;/home/adversary/Tempest/Anvil/cert/key.pem&quot;</span><br>certificate = <span class="hljs-string">&quot;/home/adversary/Tempest/Anvil/cert/cert.pem&quot;</span><br><br>[crypt]<br>LITCRYPT_ENCRYPT_KEY = <span class="hljs-string">&quot;......&quot;</span><br></code></pre></td></tr></table></figure><p>填写完配置文件，即可使用如下命令进行构建</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">cargo build --release<br></code></pre></td></tr></table></figure><h2 id="客户端-conduit"><a href="#客户端-conduit" class="headerlink" title="客户端-conduit"></a>客户端-conduit</h2><p>跨平台的与 c2 交互的客户端，完全在终端运行，编译后可以移植</p><p>其中坏死植入物用红色表示，管理员用橙色表示，存活植入物用白色表示</p><h2 id="植入物"><a href="#植入物" class="headerlink" title="植入物"></a>植入物</h2><p>Windows 植入程序使用 <code>LdrGetDllHandle</code> 和 <code>LdrGetProcedureAddress</code> 来查找程序中调用的几乎所有其他 API 的函数地址。</p><p>而 Windows_noldr 变体使用 TEB-&gt;PEB 遍历，首先读取 CPU 寄存器以查找 TEB（基于 <code>NTCurrentTeb</code>），然后定位 PEB 并遍历 PEB 以查找 ntdll.dll 或 kernel32.dll 等 dll。这允许植入体查找 API 调用的函数地址，而无需调用 <code>LdrGetDllHandle</code> 和 <code>LdrGetProcedureAddress</code></p><p>socks 代理，该模块目前为单个植入物设计。出于安全考虑，作者将代理设置为仅在 c2 服务器上本地可用。这意味着为了使用代理，操作者必须通过 ssh 进入运行 anvil c2 服务器的机器，命令如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ssh <span class="hljs-literal">-L</span> <span class="hljs-number">1080</span>：localhost：<span class="hljs-number">1080</span> username@anvilserver<br></code></pre></td></tr></table></figure><h2 id="differences"><a href="#differences" class="headerlink" title="differences"></a>differences</h2><p>在作者的描述中，目前该项目可以生成 exe 和 dll 文件，但由于时间有限，并不支持生成 shellcode</p><p>此外，作者采用精简化处理框架，删去了大量冗余功能，加入了 bof 支持、有效的远程进程注入和 WMI 支持，编写了 whoami、ipconfig 和其他更基本的模块（如 ps），通过实际深入研究 Windows 内部，并调用与 Task Manager 等相同的函数，以与 Task Manager 相同的方式检索进程列表，但使用隐蔽的动态定位函数地址</p><p>具体如何实现还需要进一步对项目进行分析</p>]]></content>
    
    
    <categories>
      
      <category>C&amp;C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C&amp;C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ppid伪造（一）</title>
    <link href="/2025/03/10/ppid%E4%BC%AA%E9%80%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2025/03/10/ppid%E4%BC%AA%E9%80%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="ppid-伪造-一"><a href="#ppid-伪造-一" class="headerlink" title="ppid 伪造(一)"></a>ppid 伪造(一)</h1><p>让恶意的程序看起来是由另一个进程产生的，主要用于逃避基于父子进程关系的检测</p><p>Windows 不能直接修改 ppid，只能在创建新进程时指定父进程句柄</p><h2 id="使用环节"><a href="#使用环节" class="headerlink" title="使用环节"></a>使用环节</h2><p>通常使用在加载器中，也可以存在 payload 中或者将加载器和 payload 一同送进目标主机</p><h2 id="伪造方法"><a href="#伪造方法" class="headerlink" title="伪造方法"></a>伪造方法</h2><p>首先构造一个能够检索目标父进程的 pid 的函数，这样可以减少手动操作的不便</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 检索目标父进程的pid</span><br><span class="hljs-function">DWORD <span class="hljs-title">getPPID</span><span class="hljs-params">(LPCWSTR processName)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE snapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>    PROCESSENTRY32 process = &#123; <span class="hljs-number">0</span> &#125;;<br>    process.dwSize = <span class="hljs-built_in">sizeof</span>(process);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Process32First</span>(snapshot, &amp;process))<br>    &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">wcscmp</span>(process.szExeFile, processName))<br>                <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(snapshot, &amp;process));<br>    &#125;<br>    <span class="hljs-built_in">CloseHandle</span>(snapshot);<br>    <span class="hljs-keyword">return</span> process.th32ProcessID;<br>&#125;<br></code></pre></td></tr></table></figure><p>主函数中进行调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tlHelp32.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    STARTUPINFOEX si = &#123; <span class="hljs-built_in">sizeof</span>(STARTUPINFOEX) &#125;;<br>    PROCESS_INFORMATION pi;<br>    SIZE_T attributeSize;<br>    <span class="hljs-built_in">ZeroMemory</span>(&amp;si, <span class="hljs-built_in">sizeof</span>(STARTUPINFOEXA));<br><br>    <span class="hljs-comment">// 通过函数 getPPID 获取目标父进程的 pid</span><br>    <span class="hljs-comment">// 输入目标进程的名称</span><br>    LPCWSTR parentProcess = <span class="hljs-string">L&quot;explorer.exe&quot;</span>;<br>    DWORD parentPID = <span class="hljs-built_in">getPPID</span>(parentProcess);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Spoofing %ws (PID: %u) as the parent process.\n&quot;</span>, parentProcess, parentPID);<br><br>    <span class="hljs-comment">// 这里末尾的数字是目标父进程的 pid，可以自定义函数获取</span><br>    HANDLE expProcess = <span class="hljs-built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, parentPID);<br>    <span class="hljs-built_in">InitializeProcThreadAttributeList</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &amp;attributeSize);<br>    si.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)<span class="hljs-built_in">HeapAlloc</span>(<span class="hljs-built_in">GetProcessHeap</span>(), <span class="hljs-number">0</span>, attributeSize);<br>    <span class="hljs-built_in">InitializeProcThreadAttributeList</span>(si.lpAttributeList, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &amp;attributeSize);<br>    <span class="hljs-built_in">UpdateProcThreadAttribute</span>(si.lpAttributeList, <span class="hljs-number">0</span>, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &amp;expProcess, <span class="hljs-built_in">sizeof</span>(expProcess), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    si.StartupInfo.cb = <span class="hljs-built_in">sizeof</span>(STARTUPINFOEXA);<br>    <span class="hljs-comment">// 这里添加目标子进程的路径或者启动命令</span><br>    LPCWSTR spawnProcess = <span class="hljs-string">L&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>;<br>    <span class="hljs-built_in">CreateProcess</span>(spawnProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, TRUE, EXTENDED_STARTUPINFO_PRESENT, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (STARTUPINFO*)&amp;si, &amp;pi);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Spawning %ws (PID: %u)\n&quot;</span>, spawnProcess, pi.dwProcessId);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>可以看到伪造成功了，弹出了记事本</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[+]</span> <span class="hljs-selector-tag">Spoofing</span> <span class="hljs-selector-tag">explorer</span><span class="hljs-selector-class">.exe</span> (<span class="hljs-attribute">PID</span>: <span class="hljs-number">12048</span>) <span class="hljs-selector-tag">as</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">parent</span> <span class="hljs-selector-tag">process</span>.<br><span class="hljs-selector-attr">[+]</span> <span class="hljs-selector-tag">Spawning</span> <span class="hljs-selector-tag">C</span>:\<span class="hljs-selector-tag">Windows</span>\<span class="hljs-selector-tag">System32</span>\<span class="hljs-selector-tag">notepad</span><span class="hljs-selector-class">.exe</span> (<span class="hljs-attribute">PID</span>: <span class="hljs-number">32968</span>)<br></code></pre></td></tr></table></figure><h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><p>如果目标父进程的完整性级别超过了标准用户，我们就无权访问这样的进程。</p><p>此时，我们就希望能有一个函数能够帮助我们检查进程的完整性级别，这个操作使用的函数为 GetTokenInformation，它能够检索与进程关联的访问令牌的信息</p><p>修改后的代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TlHelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;atlconv.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 异常处理</span><br><span class="hljs-function">string <span class="hljs-title">get_last_error</span><span class="hljs-params">(DWORD errCode)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">string <span class="hljs-title">err</span><span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span>)</span></span>;<br><span class="hljs-keyword">if</span> (errCode == <span class="hljs-number">0</span>) errCode = <span class="hljs-built_in">GetLastError</span>();<br>LPTSTR lpBuffer = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == <span class="hljs-built_in">FormatMessage</span>(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, <span class="hljs-comment">//标志位，决定如何说明lpSource参数，</span><br><span class="hljs-comment">// dwFlags的低位指定如何处理换行功能在输出缓冲区，也决定最大宽度的格式化输出行,可选参数</span><br><span class="hljs-literal">NULL</span>,<span class="hljs-comment">// 根据dwFlags标志而定</span><br>errCode,<span class="hljs-comment">// 请求的消息的标识符</span><br><span class="hljs-comment">// 当dwFlags标志为FORMAT_MESSAGE_FROM_STRING时会被忽略</span><br><span class="hljs-built_in">MAKELANGID</span>(LANG_NEUTRAL, SUBLANG_DEFAULT),<span class="hljs-comment">//请求的消息的语言标识符</span><br>(LPTSTR)&amp;lpBuffer,<span class="hljs-comment">//接收错误信息描述的缓冲区指针</span><br><span class="hljs-number">0</span>,<span class="hljs-comment">//如果FORMAT_MESSAGE_ALLOCATE_BUFFER标志没有被指定，这个参数必须指定为输出缓冲区的大小，如果指定值为0，这个参数指定为分配给输出缓冲区的最小数</span><br><span class="hljs-literal">NULL</span><span class="hljs-comment">//保存格式化信息中的插入值的一个数组</span><br>))<br>&#123;<span class="hljs-comment">//失败</span><br><span class="hljs-type">char</span> tmp[<span class="hljs-number">100</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">sprintf_s</span>(tmp, <span class="hljs-string">&quot;&#123;未定义错误描述(%d)&#125;&quot;</span>, errCode);<br>err = tmp;<br>&#125;<br><span class="hljs-keyword">else</span>    <span class="hljs-comment">//成功</span><br>&#123;<br>USES_CONVERSION;<br>err = <span class="hljs-built_in">W2A</span>(lpBuffer);<br><span class="hljs-built_in">LocalFree</span>(lpBuffer);<br>&#125;<br><span class="hljs-keyword">return</span> err;<br>&#125;<br><br><span class="hljs-comment">// 检查进程的完整性级别</span><br><span class="hljs-function">LPCWSTR <span class="hljs-title">getProcessIntegrityLevel</span><span class="hljs-params">(HANDLE hProcess, PDWORD pdwIntegrityLevel)</span></span><br><span class="hljs-function"></span>&#123;<br>DWORD dwError = ERROR_SUCCESS;<br>HANDLE hToken = <span class="hljs-literal">NULL</span>;<br>DWORD cbTokenIL = <span class="hljs-number">0</span>;<br>PTOKEN_MANDATORY_LABEL pTokenIL = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (pdwIntegrityLevel == <span class="hljs-literal">NULL</span>)<br>&#123;<br>dwError = ERROR_INVALID_PARAMETER;<br><span class="hljs-keyword">goto</span> Cleanup;<br>&#125;<br><span class="hljs-comment">// 以TOKEN_QUERY开启此线程的主访问令牌。</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(hProcess, TOKEN_QUERY, &amp;hToken))<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;[!] OpenProcessToken error!&quot;</span> &lt;&lt; endl;<br>dwError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">goto</span> Cleanup;<br>&#125;<br><span class="hljs-comment">// 查询令牌完整性级别信息的大小。注意：我们预期得到一个FALSE结果及错误</span><br><span class="hljs-comment">// ERROR_INSUFFICIENT_BUFFER， 这是由于我们在GetTokenInformation输入一个</span><br><span class="hljs-comment">// 空缓冲。同时，在cbTokenIL中我们会得知完整性级别信息的大小。</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetTokenInformation</span>(hToken, TokenIntegrityLevel, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;cbTokenIL))<br>&#123;<br><span class="hljs-keyword">if</span> (ERROR_INSUFFICIENT_BUFFER != <span class="hljs-built_in">GetLastError</span>())<br>&#123;<br><span class="hljs-comment">// 当进程运行于Windows Vista之前的系统中，GetTokenInformation返回</span><br><span class="hljs-comment">// FALSE和错误码ERROR_INVALID_PARAMETER。这是由于这些操作系统不支</span><br><span class="hljs-comment">// 持TokenElevation。</span><br>cout &lt;&lt; <span class="hljs-string">&quot;[!] GetTokenInformation no support !&quot;</span> &lt;&lt; endl;<br>dwError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">goto</span> Cleanup;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 现在我们为完整性级别信息分配一个缓存。</span><br>pTokenIL = (TOKEN_MANDATORY_LABEL*)<span class="hljs-built_in">LocalAlloc</span>(LPTR, cbTokenIL);<br><span class="hljs-keyword">if</span> (pTokenIL == <span class="hljs-literal">NULL</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;[!] pTokenIL is null&quot;</span> &lt;&lt; endl;<br>dwError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">goto</span> Cleanup;<br>&#125;<br><span class="hljs-comment">// 获得令牌完整性级别信息。</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">GetTokenInformation</span>(hToken, TokenIntegrityLevel, pTokenIL,<br>cbTokenIL, &amp;cbTokenIL))<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;[!] GetTokenInformation error !&quot;</span> &lt;&lt; endl;<br>dwError = <span class="hljs-built_in">GetLastError</span>();<br><span class="hljs-keyword">goto</span> Cleanup;<br>&#125;<br><span class="hljs-comment">// 完整性级别SID为S-1-16-0xXXXX形式。（例如：S-1-16-0x1000表示为低完整性</span><br><span class="hljs-comment">// 级别的SID）。而且有且仅有一个次级授权信息。</span><br>*pdwIntegrityLevel = *<span class="hljs-built_in">GetSidSubAuthority</span>(pTokenIL-&gt;Label.Sid, <span class="hljs-number">0</span>);<br>Cleanup:<br><span class="hljs-comment">// 集中清理所有已分配的内存资源</span><br><span class="hljs-keyword">if</span> (hToken)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(hToken);<br>hToken = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (pTokenIL)<br>&#123;<br><span class="hljs-built_in">LocalFree</span>(pTokenIL);<br>pTokenIL = <span class="hljs-literal">NULL</span>;<br>cbTokenIL = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (ERROR_SUCCESS != dwError)<br>&#123;<br><span class="hljs-comment">// 失败时确保此能够获取此错误代码</span><br><span class="hljs-built_in">SetLastError</span>(dwError);<br><span class="hljs-keyword">return</span> <span class="hljs-string">L&quot;ERROR&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span> (*pdwIntegrityLevel == SECURITY_MANDATORY_LOW_RID) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">L&quot;LOW&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*pdwIntegrityLevel &gt;= SECURITY_MANDATORY_MEDIUM_RID &amp;&amp; *pdwIntegrityLevel &lt; SECURITY_MANDATORY_HIGH_RID) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">L&quot;MEDIUM&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*pdwIntegrityLevel &gt;= SECURITY_MANDATORY_HIGH_RID) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">L&quot;HIGH&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*pdwIntegrityLevel &gt;= SECURITY_MANDATORY_SYSTEM_RID) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">L&quot;SYSTEM&quot;</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function">DWORD <span class="hljs-title">getPPID</span><span class="hljs-params">(LPCWSTR processName)</span> </span>&#123;<br>HANDLE snapshot = <span class="hljs-built_in">CreateToolhelp32Snapshot</span>(TH32CS_SNAPPROCESS, <span class="hljs-number">0</span>);<br>PROCESSENTRY32 process = &#123; <span class="hljs-number">0</span> &#125;;<br>process.dwSize = <span class="hljs-built_in">sizeof</span>(process);<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Process32First</span>(snapshot, &amp;process)) &#123;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">wcscmp</span>(process.szExeFile, processName)) &#123;<br>HANDLE hProcess = <span class="hljs-built_in">OpenProcess</span>(MAXIMUM_ALLOWED, FALSE, process.th32ProcessID);<br><span class="hljs-keyword">if</span> (hProcess) &#123;<br>LPCWSTR integrityLevel = <span class="hljs-literal">NULL</span>;<br>DWORD dwIntegrityLevel;<br>integrityLevel = <span class="hljs-built_in">getProcessIntegrityLevel</span>(hProcess, &amp;dwIntegrityLevel);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">wcscmp</span>(integrityLevel, <span class="hljs-string">L&quot;ERROR&quot;</span>)) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;[!] PID = &quot;</span> &lt;&lt; process.th32ProcessID &lt;&lt; <span class="hljs-string">&quot; GetProcessIntegrityLevel failed, Error: &quot;</span> &lt;&lt; <span class="hljs-built_in">get_last_error</span>(<span class="hljs-built_in">GetLastError</span>()) &lt;&lt; endl;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">wcscmp</span>(integrityLevel, <span class="hljs-string">L&quot;MEDIUM&quot;</span>)) &#123;<br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Process32Next</span>(snapshot, &amp;process));<br>&#125;<br><span class="hljs-built_in">CloseHandle</span>(snapshot);<br><span class="hljs-comment">// 没有找到 MEDIUM 权限的进程</span><br><span class="hljs-keyword">if</span> (!flag) &#123;<br>cout &lt;&lt; processName &lt;&lt; <span class="hljs-string">&quot; does have medium integrity level!!&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> process.th32ProcessID;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>STARTUPINFOEXA si;<br>PROCESS_INFORMATION pi;<br>SIZE_T attributeSize;<br><span class="hljs-built_in">ZeroMemory</span>(&amp;si, <span class="hljs-built_in">sizeof</span>(STARTUPINFOEXA));<br><br><span class="hljs-comment">// 通过函数 getPPID 获取目标父进程的 pid</span><br><span class="hljs-comment">// 输入目标进程的名称</span><br>LPCWSTR parentProcess = <span class="hljs-string">L&quot;svchost.exe&quot;</span>;<br>DWORD parentPID = <span class="hljs-built_in">getPPID</span>(parentProcess);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Spoofing %ws (PID: %u) as the parent process.\n&quot;</span>, parentProcess, parentPID);<br><br><span class="hljs-comment">// 这里末尾的数字是目标父进程的 pid，可以自定义函数获取</span><br>HANDLE parentProcessHandle = <span class="hljs-built_in">OpenProcess</span>(MAXIMUM_ALLOWED, <span class="hljs-literal">false</span>, parentPID);<br><span class="hljs-built_in">InitializeProcThreadAttributeList</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &amp;attributeSize);<br>si.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)<span class="hljs-built_in">HeapAlloc</span>(<span class="hljs-built_in">GetProcessHeap</span>(), <span class="hljs-number">0</span>, attributeSize);<br><span class="hljs-built_in">InitializeProcThreadAttributeList</span>(si.lpAttributeList, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, &amp;attributeSize);<br><span class="hljs-built_in">UpdateProcThreadAttribute</span>(si.lpAttributeList, <span class="hljs-number">0</span>, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &amp;parentProcessHandle, <span class="hljs-built_in">sizeof</span>(HANDLE), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>si.StartupInfo.cb = <span class="hljs-built_in">sizeof</span>(STARTUPINFOEXA);<br><br><span class="hljs-comment">// 这里添加目标子进程的路径或者启动命令</span><br>LPCWSTR spawnProcess = <span class="hljs-string">L&quot;C:\\Windows\\System32\\notepad.exe&quot;</span>;<br><span class="hljs-built_in">CreateProcess</span>(spawnProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, TRUE, EXTENDED_STARTUPINFO_PRESENT, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (STARTUPINFO*)&amp;si, &amp;pi);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Spawning %ws (PID: %u)\n&quot;</span>, spawnProcess, pi.dwProcessId);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对抗检测"><a href="#对抗检测" class="headerlink" title="对抗检测"></a>对抗检测</h2><p>用这种方法伪造的 ppid 是能够被检测到的</p><p><a href="https://github.com/countercept/ppid-spoofing/blob/master/detect-ppid-spoof.py">https://github.com/countercept/ppid-spoofing/blob/master/detect-ppid-spoof.py</a></p><p>父进程欺骗绕过可以绕过脚本对于父子原进程关系的检测，减少被发现的可能，这个过几天写</p>]]></content>
    
    
    <categories>
      
      <category>免杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>enigma密码机的python实现</title>
    <link href="/2025/03/06/enigma%E5%AF%86%E7%A0%81%E6%9C%BA%E7%9A%84python%E5%AE%9E%E7%8E%B0/"/>
    <url>/2025/03/06/enigma%E5%AF%86%E7%A0%81%E6%9C%BA%E7%9A%84python%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="enigma密码机的python实现"><a href="#enigma密码机的python实现" class="headerlink" title="enigma密码机的python实现"></a>enigma密码机的python实现</h1><p>按照下面的示意图写了个 enigma密码机，如果之后有空，会把这个整合到我用 rust 写的密码学工具箱里</p><p><img src="/2025/03/06/enigma%E5%AF%86%E7%A0%81%E6%9C%BA%E7%9A%84python%E5%AE%9E%E7%8E%B0/source.png" alt="source"></p><h2 id="基础工作"><a href="#基础工作" class="headerlink" title="基础工作"></a>基础工作</h2><p>首先考虑到数字和字母的映射问题，写下如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fold\en_basic.py</span><br><span class="hljs-comment"># 通过数字找到对应的字母</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">number_to_letter</span>(<span class="hljs-params">number, mapping_dict</span>):<br>    <span class="hljs-comment"># 将数字转换为字符串</span><br>    number_str = <span class="hljs-built_in">str</span>(number)<br>    <span class="hljs-comment"># 查找对应的字母</span><br>    <span class="hljs-keyword">for</span> letter, num <span class="hljs-keyword">in</span> mapping_dict.items():<br>        <span class="hljs-keyword">if</span> num == number_str:<br>            <span class="hljs-keyword">return</span> letter<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fold\en_rotate.py</span><br><span class="hljs-comment"># 初始化字母表和数字表</span><br>alphabet = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>numbers = [<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">26</span>)]<br><br><span class="hljs-comment"># 创建映射字典</span><br>mapping_dict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(alphabet, numbers))<br></code></pre></td></tr></table></figure><p>这样，就实现了数字和字母的互相对应</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>做完基础工作，开始写加密部分，解密部分就是加密的逆过程</p><p>首先要清楚 enigma 密码机的原理。每一次输入，快轮都会转一格，当快轮转完一圈，中轮转一格，以此类推，类比时钟的时分秒。</p><p>所以首先要写的就是字母的轮换代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fold\en_rotate.py</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> en_basic<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate_function</span>(<span class="hljs-params">input_data, num</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    旋转数组，将 input_data 右移 num 位</span><br><span class="hljs-string">    :param input_data: 输入数组（列表或 NumPy 数组）</span><br><span class="hljs-string">    :param num: 旋转位数</span><br><span class="hljs-string">    :return: 旋转后的数组</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    n = <span class="hljs-built_in">len</span>(input_data)<br>    output_data = np.zeros(n, dtype=<span class="hljs-built_in">int</span>)  <span class="hljs-comment"># 预分配数组</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        output_data[i] = input_data[(i + num) % n]  <span class="hljs-comment"># 取模运算实现循环</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(output_data)<br></code></pre></td></tr></table></figure><p>接下来构建加密算法，其中的 L1，R1，L2，R2，L3，R3 可以根据需要自定义，这里的数组是因为已经给了固定值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fold\en_rotate.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_function</span>(<span class="hljs-params">input_data</span>):<br>    L1 = [<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>]<br>    R1 = [<span class="hljs-number">21</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">19</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">26</span>,<span class="hljs-number">20</span>,<span class="hljs-number">8</span>,<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">17</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">18</span>,<span class="hljs-number">2</span>,<span class="hljs-number">25</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>,<span class="hljs-number">13</span>]<br><br>    L2 = [<span class="hljs-number">26</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>]<br>    R2 = [<span class="hljs-number">20</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">5</span>,<span class="hljs-number">16</span>,<span class="hljs-number">2</span>,<span class="hljs-number">22</span>,<span class="hljs-number">19</span>,<span class="hljs-number">11</span>,<span class="hljs-number">18</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">13</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">21</span>,<span class="hljs-number">9</span>,<span class="hljs-number">26</span>,<span class="hljs-number">17</span>]<br>        <br>    L3 = [<span class="hljs-number">26</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>]<br>    R3 = [<span class="hljs-number">14</span>,<span class="hljs-number">8</span>,<span class="hljs-number">18</span>,<span class="hljs-number">26</span>,<span class="hljs-number">17</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">13</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">23</span>,<span class="hljs-number">5</span>,<span class="hljs-number">24</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">25</span>,<span class="hljs-number">16</span>,<span class="hljs-number">19</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 字母对应位数</span><br>    <span class="hljs-comment"># 当输入字母时，每输入一个快轮加一</span><br>    <span class="hljs-comment"># 快轮转一圈后，中轮加一</span><br>    <span class="hljs-comment"># 中轮转一圈后，慢轮加一</span><br>    <span class="hljs-comment"># 一个轮子之间按数字匹配，不同轮子之间按位数匹配</span><br><br>    input_data = input_data.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).upper()<br>    length = <span class="hljs-built_in">len</span>(input_data)<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    quick_num = <span class="hljs-number">1</span><br>    mid_num = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> each_letter <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        <span class="hljs-comment"># 输入字母</span><br>        <span class="hljs-comment"># print(&quot;输入字母:&quot;,input_data[each_letter])</span><br>        trans_letter = <span class="hljs-built_in">int</span>(mapping_dict.get(input_data[each_letter]))<br>        <span class="hljs-comment"># print(&quot;输入字母对应数字:&quot;,trans_letter,&quot;\n&quot;)</span><br>        num_low_left = L1[trans_letter]<br>        <br>        <span class="hljs-comment"># 输入字母匹配快轮左位</span><br>        <span class="hljs-comment"># print(&quot;输入字母匹配快轮左位:&quot;)</span><br>        <span class="hljs-comment"># print(&quot;快左-值&quot;,num_low_left)</span><br>        <span class="hljs-comment"># print(&quot;快左-位&quot;,L1.index(num_low_left),&quot;\n&quot;)</span><br>        <span class="hljs-comment"># 快轮左位匹配快轮右位</span><br>        num_low_right = num_low_left<br>        <span class="hljs-comment"># print(&quot;快轮左位匹配快轮右位:&quot;)</span><br>        <span class="hljs-comment"># print(&quot;快右-值&quot;,num_low_right)</span><br>        <span class="hljs-comment"># print(&quot;快右-位&quot;,R1.index(num_low_right),&quot;\n&quot;)</span><br>        <br>        <span class="hljs-comment"># 快轮右位匹配中轮左位</span><br>        <span class="hljs-comment"># print(&quot;快轮右位匹配中轮左位:&quot;)</span><br>        pos_mid_left = R1.index(num_low_right)<br>        <span class="hljs-comment"># print(&quot;中左-值&quot;,L2[pos_mid_left])</span><br>        <span class="hljs-comment"># print(&quot;中左-位&quot;,pos_mid_left,&quot;\n&quot;)</span><br>        <span class="hljs-comment"># 中轮左位匹配中轮右位</span><br>        num_mid_right = L2[pos_mid_left]<br>        <span class="hljs-comment"># print(&quot;中轮左位匹配中轮右位:&quot;)</span><br>        <span class="hljs-comment"># print(&quot;中右-值&quot;,num_mid_right)</span><br>        <span class="hljs-comment"># print(&quot;中右-位&quot;,R2.index(num_mid_right),&quot;\n&quot;)</span><br>        <br>        <span class="hljs-comment"># 中轮右位匹配慢轮左位</span><br>        <span class="hljs-comment"># print(&quot;中轮右位匹配慢轮左位:&quot;)</span><br>        pos_high_left = R2.index(num_mid_right)<br>        <span class="hljs-comment"># print(&quot;慢左-值&quot;,L3[pos_high_left])</span><br>        <span class="hljs-comment"># print(&quot;慢左-位&quot;,pos_high_left,&quot;\n&quot;)</span><br>        <span class="hljs-comment"># 慢轮左位匹配慢轮右位</span><br>        num_high_right = L3[pos_high_left]<br>        <span class="hljs-comment"># print(&quot;慢轮左位匹配慢轮右位:&quot;)</span><br>        <span class="hljs-comment"># print(&quot;慢右-值&quot;,num_high_right)</span><br>        <span class="hljs-comment"># print(&quot;慢右-位&quot;,R3.index(num_high_right),&quot;\n&quot;)</span><br>        <br>        <span class="hljs-comment"># 慢轮右位匹配输出位</span><br>        <span class="hljs-comment"># print(&quot;慢轮右位匹配输出位:&quot;)</span><br>        output_letter = en_basic.number_to_letter(R3.index(num_high_right), mapping_dict)<br>        <span class="hljs-comment"># print(&quot;输出位-值&quot;,output_letter)</span><br>        result += output_letter<br><br>        <span class="hljs-comment"># 轮子转动</span><br>        L3 = rotate_function(L3, <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># print(L3)</span><br>        R3 = rotate_function(R3, <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># print(R3,&quot;\n&quot;)</span><br>        quick_num = quick_num + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> quick_num &gt; <span class="hljs-number">26</span>:<br>            quick_num = <span class="hljs-number">1</span><br>            L2 = rotate_function(L2, <span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># print(L2)</span><br>            R2 = rotate_function(R2, <span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># print(R2)</span><br>            mid_num = mid_num + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> mid_num &gt; <span class="hljs-number">26</span>:<br>                L1 = rotate_function(L1, <span class="hljs-number">1</span>)<br>                <span class="hljs-comment"># print(L1)</span><br>                R1 = rotate_function(R1, <span class="hljs-number">1</span>)<br>                <span class="hljs-comment"># print(R1)</span><br>                mid_num = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result,L1,R1,L2,R2,L3,R3<br></code></pre></td></tr></table></figure><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>解密算法就是加密算法的逆过程，但要注意这里的转轮算法要写在前面，因为在加密算法中写在了最后面，解密的时候应该先回滚一格快轮才是真正结束的地方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fold\en_rotate.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_function</span>(<span class="hljs-params">input_data,L1,R1,L2,R2,L3,R3</span>):<br>    input_data = input_data.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).upper()<br>    length = <span class="hljs-built_in">len</span>(input_data)<br>    result = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> each_letter <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br><br>        <span class="hljs-comment"># 轮子逆向旋转</span><br>        L3 = rotate_function(L3, -<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># print(&quot;逆向旋转：&quot;,L3)</span><br>        R3 = rotate_function(R3, -<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># print(R3,&quot;\n&quot;)</span><br>        <span class="hljs-keyword">if</span> R3[<span class="hljs-number">1</span>]==<span class="hljs-number">14</span>:<br>            L2 = rotate_function(L2, -<span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># print(L2)</span><br>            R2 = rotate_function(R2, -<span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># print(R2)</span><br>            <span class="hljs-keyword">if</span> R2[<span class="hljs-number">1</span>]==<span class="hljs-number">20</span>:<br>                L1 = rotate_function(L1, -<span class="hljs-number">1</span>)<br>                <span class="hljs-comment"># print(L1)</span><br>                R1 = rotate_function(R1, -<span class="hljs-number">1</span>)<br>                <span class="hljs-comment"># print(R1)</span><br><br>        <span class="hljs-comment"># 输入加密字母</span><br>        <span class="hljs-comment"># print(&quot;输入加密字母:&quot;, input_data[each_letter])</span><br>        trans_letter = <span class="hljs-built_in">int</span>(mapping_dict.get(input_data[each_letter]))<br><br>        <span class="hljs-comment"># 输入字母</span><br>        <span class="hljs-comment"># print(&quot;输入字母:&quot;,input_data[each_letter])</span><br>        trans_letter = <span class="hljs-built_in">int</span>(mapping_dict.get(input_data[each_letter]))<br>        <span class="hljs-comment"># print(&quot;输入字母对应数字:&quot;,trans_letter,&quot;\n&quot;)</span><br>        pos_low_left = L1[trans_letter]<br><br>        <span class="hljs-comment"># 慢轮右位匹配慢轮左位</span><br>        pos_high_right = trans_letter<br>        <span class="hljs-comment"># print(&quot;慢轮右位匹配慢轮左位:&quot;)</span><br>        <span class="hljs-comment"># print(&quot;慢右-值&quot;, R3[pos_high_right])</span><br>        pos_high_left = L3.index(R3[pos_high_right])<br>        <span class="hljs-comment"># print(&quot;慢左-位&quot;, pos_high_left,&quot;\n&quot;)</span><br><br>        <span class="hljs-comment"># 中轮右位匹配中轮左位</span><br>        pos_mid_right = pos_high_left<br>        <span class="hljs-comment"># print(&quot;中轮右位匹配中轮左位:&quot;)</span><br>        <span class="hljs-comment"># print(&quot;中右-值&quot;, R2[pos_mid_right])</span><br>        pos_mid_left = L2.index(R2[pos_mid_right])<br>        <span class="hljs-comment"># print(&quot;中左-位&quot;, pos_mid_left,&quot;\n&quot;)</span><br><br>        <span class="hljs-comment"># 快轮右位匹配快轮左位（逆向）</span><br>        pos_low_right = pos_mid_left<br>        <span class="hljs-comment"># print(&quot;快轮右位匹配快轮左位:&quot;)</span><br>        <span class="hljs-comment"># print(&quot;快右-值&quot;, R1[pos_low_right])</span><br>        pos_low_left = L1.index(R1[pos_low_right])<br>        <span class="hljs-comment"># print(&quot;快左-位&quot;, pos_low_left,&quot;\n&quot;)</span><br><br>        <span class="hljs-comment"># 快轮左位匹配输出位</span><br>        <span class="hljs-comment"># print(&quot;快轮左位匹配输出位:&quot;)</span><br>        pos_output = L1.index(L1[pos_low_left])<br>        output_letter = en_basic.number_to_letter(pos_output, mapping_dict)<br>        <span class="hljs-comment"># print(&quot;输出位-值&quot;,output_letter,&quot;\n&quot;)</span><br>        result += output_letter<br><br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>简单的调用一下写好的函数就行。注意一点，加密后的内容需要倒置放入解密机里，解密后再次倒置就是明文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># fole\enigma_use</span><br><span class="hljs-keyword">import</span> en_rotate<br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;the state key laboratory of networking and switching technology belongs to beijing university of posts and telecommunication the laboratory was opened in nineteen ninety two in nineteen ninety five the laboratory passed acceptance inspection by government and an evaluation organized by ministry of science and technology in two thousand and two since two thousand and four the laboratory has been renamed as the state key laboratory of networking and switching technology by ministry of science and technology&quot;</span><br><span class="hljs-comment">#str = &quot;abc&quot;</span><br><br>result,L1,R1,L2,R2,L3,R3 = en_rotate.encrypt_function(<span class="hljs-built_in">str</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypted text:&quot;</span>, result,<span class="hljs-string">&quot;\n&quot;</span>)<br><br>rev_result = result[::-<span class="hljs-number">1</span>]<br><br>re = en_rotate.decrypt_function(rev_result,L1,R1,L2,R2,L3,R3)<br>re_final = re[::-<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted text:&quot;</span>, re_final)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Part_Two_A_Minimal_Rust_Kernel</title>
    <link href="/2024/11/05/Part-Two-A-Minimal-Rust-Kernel/"/>
    <url>/2024/11/05/Part-Two-A-Minimal-Rust-Kernel/</url>
    
    <content type="html"><![CDATA[<h1 id="Part-Two-A-Minimal-Rust-Kernel"><a href="#Part-Two-A-Minimal-Rust-Kernel" class="headerlink" title="Part_Two_A_Minimal_Rust_Kernel"></a>Part_Two_A_Minimal_Rust_Kernel</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>编译为一个特定的目标系统</p><h2 id="新增-FlowOS-json"><a href="#新增-FlowOS-json" class="headerlink" title="新增 FlowOS.json"></a>新增 <code>FlowOS.json</code></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;llvm-target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;x86_64-unknown-none&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data-layout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;arch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;x86_64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;target-endian&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;little&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;target-pointer-width&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;target-c-int-width&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;32&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;os&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;executables&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;linker-flavor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ld.lld&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;linker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rust-lld&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;panic-strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;abort&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;disable-redzone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;features&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-mmx,-sse,+soft-float&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="build-std-特性"><a href="#build-std-特性" class="headerlink" title="build-std 特性"></a><em>build-std</em> 特性</h2><p>允许按照自己的需要重编译 core 等标准 crate，而不需要使用 Rust 安装程序内置的预编译版本</p><p>但是该特性是全新的功能，到目前为止尚未完全完成，所以它被标记为 “unstable” 且仅被允许在 <em>Nightly</em> 环境下调用</p><p>要启用该特性，在 <code>.cargo/config.toml</code> 写入以下语句：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[unstable]</span><br><span class="hljs-attr">build-std</span> = [<span class="hljs-string">&quot;core&quot;</span>, <span class="hljs-string">&quot;compiler_builtins&quot;</span>]<br></code></pre></td></tr></table></figure><p>该配置会告知cargo需要重新编译 <code>core</code> 和 <code>compiler_builtins</code> 这两个crate，其中 <code>compiler_builtins</code> 是 <code>core</code> 的必要依赖</p><p>重编译需要提供源码，使用如下命令来下载它们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rustup">rustup component add rust-src<br></code></pre></td></tr></table></figure><p>编译命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cargo">cargo build --target .\src\FlowOS.json<br></code></pre></td></tr></table></figure><h2 id="build-std-features"><a href="#build-std-features" class="headerlink" title="build-std-features"></a><em>build-std-features</em></h2><p>为了使用内存相关函数，在 <code>.cargo/config.toml</code>  的 [<code>unstable</code>] 写入以下语句：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">build-std-features</span> = [<span class="hljs-string">&quot;compiler-builtins-mem&quot;</span>]<br></code></pre></td></tr></table></figure><p>设置编译目标：在 <code>.cargo/config.toml</code> 加入如下选项，接下来，&#x3D;&#x3D;使用 cargo build 即可进行编译&#x3D;&#x3D;</p><p>这里因为一些原因，我使用了绝对路径</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[build]</span><br><span class="hljs-attr">target</span> = <span class="hljs-string">&quot;F:\\vscode_repo\\Rust\\FlowOS\\src\\FlowOS.json&quot;</span><br></code></pre></td></tr></table></figure><h2 id="向屏幕打印字符"><a href="#向屏幕打印字符" class="headerlink" title="向屏幕打印字符"></a>向屏幕打印字符</h2><p>写入 <code>VGA 字符缓冲区</code>，这段缓冲区的地址是 <code>0xb8000</code>，且每个字符单元包含一个 ASCII 码字节和一个颜色字节</p><p>代码修改</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">static</span> HELLO: &amp;[<span class="hljs-type">u8</span>] = <span class="hljs-string">b&quot;Hello World!&quot;</span>;<br><br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">_start</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vga_buffer</span> = <span class="hljs-number">0xb8000</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span>;<br><br>    <span class="hljs-keyword">for</span> (i, &amp;byte) <span class="hljs-keyword">in</span> HELLO.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            *vga_buffer.<span class="hljs-title function_ invoke__">offset</span>(i <span class="hljs-keyword">as</span> <span class="hljs-type">isize</span> * <span class="hljs-number">2</span>) = byte;<br>            *vga_buffer.<span class="hljs-title function_ invoke__">offset</span>(i <span class="hljs-keyword">as</span> <span class="hljs-type">isize</span> * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) = <span class="hljs-number">0xb</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">loop</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="启动内核"><a href="#启动内核" class="headerlink" title="启动内核"></a>启动内核</h2><h3 id="创建引导映像"><a href="#创建引导映像" class="headerlink" title="创建引导映像"></a>创建引导映像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cargo">cargo add bootloader<br></code></pre></td></tr></table></figure><p>我这里使用的是</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">bootloader</span> = <span class="hljs-string">&quot;0.9&quot;</span><br></code></pre></td></tr></table></figure><h3 id="将内核和引导程序组合"><a href="#将内核和引导程序组合" class="headerlink" title="将内核和引导程序组合"></a>将内核和引导程序组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo install bootimage<br></code></pre></td></tr></table></figure><h3 id="安装-llvm-tools-preview"><a href="#安装-llvm-tools-preview" class="headerlink" title="安装  llvm-tools-preview"></a>安装  llvm-tools-preview</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">rustup component add llvm-tools-preview<br></code></pre></td></tr></table></figure><h3 id="创建一个可引导的磁盘映像"><a href="#创建一个可引导的磁盘映像" class="headerlink" title="创建一个可引导的磁盘映像"></a>创建一个可引导的磁盘映像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo bootimage<br></code></pre></td></tr></table></figure><p>编译好后能在文件夹中找到 <code>bootimage-FlowOS.bin</code></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在 QEMU 中输入如下命令运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 -drive format=raw,file=target\FlowOS\debug\bootimage-FlowOS.bin<br></code></pre></td></tr></table></figure><p>也可以使用 dd 工具把内核写入 U 盘，以便在真机上启动，这里不多赘述</p><p>原代码作者补注：<code>bootloader</code> 包暂时不支持 UEFI，所以不能在 UEFI 机器上启动（现在不知道，没试）</p><h3 id="使用-cargo-run"><a href="#使用-cargo-run" class="headerlink" title="使用 cargo run"></a>使用 <code>cargo run</code></h3><p>在 <code>.cargo/config.toml</code>  中设置 <code>runner</code> 配置项：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[target.&#x27;cfg(target_os = &quot;none&quot;)&#x27;]</span><br><span class="hljs-attr">runner</span> = <span class="hljs-string">&quot;bootimage runner&quot;</span><br></code></pre></td></tr></table></figure><p>这样，就可以直接使用 <code>cargo run</code> 直接运行</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Rust_OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Part_One_First_Sight</title>
    <link href="/2024/11/05/Part-One-First-Sight/"/>
    <url>/2024/11/05/Part-One-First-Sight/</url>
    
    <content type="html"><![CDATA[<h1 id="Part-One-First-Sight"><a href="#Part-One-First-Sight" class="headerlink" title="Part_One_First_Sight"></a>Part_One_First_Sight</h1><p>参考：<a href="https://os.phil-opp.com/zh-CN/freestanding-rust-binary/">独立式可执行程序 | Writing an OS in Rust</a></p><p>样例代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![no_std]</span> <span class="hljs-comment">// 不链接 Rust 标准库</span><br><span class="hljs-meta">#![no_main]</span> <span class="hljs-comment">// 禁用所有 Rust 层级的入口点</span><br>  <br><span class="hljs-keyword">use</span> core::panic::PanicInfo;<br>  <br><span class="hljs-comment">/// 这个函数将在 panic 时被调用</span><br><span class="hljs-meta">#[panic_handler]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">panic</span>(_info: &amp;PanicInfo) <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    <span class="hljs-keyword">loop</span> &#123;&#125;<br>&#125;<br>  <br><span class="hljs-meta">#[no_mangle]</span> <span class="hljs-comment">// 不重整函数名</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">_start</span>() <span class="hljs-punctuation">-&gt;</span> ! &#123;<br>    <span class="hljs-comment">// 因为链接器会寻找一个名为 `_start` 的函数，所以这个函数就是入口点</span><br>    <span class="hljs-comment">// 默认命名为 `_start`</span><br>    <span class="hljs-keyword">loop</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>cargo.toml</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust">[package]<br>name = <span class="hljs-string">&quot;FlowOS&quot;</span><br>version = <span class="hljs-string">&quot;0.1.0&quot;</span><br>edition = <span class="hljs-string">&quot;2021&quot;</span><br><br>[dependencies]<br><br>[profile.dev]<br>panic = <span class="hljs-string">&quot;abort&quot;</span><br><br>[profile.release]<br>panic = <span class="hljs-string">&quot;abort&quot;</span><br></code></pre></td></tr></table></figure><p>Windows 平台使用的编译命令不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo rustc -- -C link-args=<span class="hljs-string">&quot;/ENTRY:_start /SUBSYSTEM:console&quot;</span><br></code></pre></td></tr></table></figure><p>也可以在 rust 目录下的 <code>.cargo</code> 文件夹下创建 <code>config.toml</code> 文件，输入</p><p>&#x3D;&#x3D;注意；如果同时包含 config 和 config.toml 请二选一，如果同时存在，无后缀的会被加载&#x3D;&#x3D;</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[target.&#x27;cfg(target_os = &quot;linux&quot;)&#x27;]</span><br><span class="hljs-attr">rustflags</span> = [<span class="hljs-string">&quot;-C&quot;</span>, <span class="hljs-string">&quot;link-arg=-nostartfiles&quot;</span>]<br><br><span class="hljs-section">[target.&#x27;cfg(target_os = &quot;windows&quot;)&#x27;]</span><br><span class="hljs-attr">rustflags</span> = [<span class="hljs-string">&quot;-C&quot;</span>, <span class="hljs-string">&quot;link-args=/ENTRY:_start /SUBSYSTEM:console&quot;</span>]<br><br><span class="hljs-section">[target.&#x27;cfg(target_os = &quot;macos&quot;)&#x27;]</span><br><span class="hljs-attr">rustflags</span> = [<span class="hljs-string">&quot;-C&quot;</span>, <span class="hljs-string">&quot;link-args=-e __start -static -nostartfiles&quot;</span>]<br></code></pre></td></tr></table></figure><p>上述只是拓展的方法，之后的编译都使用裸机，输入如下代码</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">rustup <span class="hljs-keyword">target</span> add thumbv7em-<span class="hljs-keyword">none</span>-eabihf<br></code></pre></td></tr></table></figure><p>编译命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">cargo build <span class="hljs-attr">--target</span> thumbv7em-<span class="hljs-attribute">none</span>-eabihf<br></code></pre></td></tr></table></figure><p>另附：使用 nightly 版本</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>Rust_OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scripts</title>
    <link href="/2024/10/18/scripts/"/>
    <url>/2024/10/18/scripts/</url>
    
    <content type="html"><![CDATA[<h1 id="一些实用的小脚本"><a href="#一些实用的小脚本" class="headerlink" title="一些实用的小脚本"></a>一些实用的小脚本</h1><p>最近打比赛，发现有很多脚本能够实现模板化处理，能够节省大量时间</p><p>下面将展示笔者收藏的一些常用脚本</p><h2 id="简单异或"><a href="#简单异或" class="headerlink" title="简单异或"></a>简单异或</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> string_length = ; <span class="hljs-comment">// 字符串长度</span><br>    <span class="hljs-type">int</span> key = ;           <span class="hljs-comment">// 密钥(需要异或的内容)</span><br><br>    <span class="hljs-comment">// 定义v5数组</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> v5[string_length] = &#123;<br>        <span class="hljs-comment">// 密文</span><br>    &#125;;<br>    <br>    <span class="hljs-comment">// 定义解密后的flag数组</span><br>    <span class="hljs-type">char</span> flag[string_length + <span class="hljs-number">1</span>]; <span class="hljs-comment">// 长度 + &#x27;\0&#x27; 结束符</span><br><br>    <span class="hljs-comment">// 解密过程</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; string_length; ++i) &#123;<br>        flag[i] = v5[i] ^ key; <span class="hljs-comment">// xor，这里的 key 也可以根据需要进行修改</span><br>    &#125;<br>    flag[string_length] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 结束符</span><br><br>    <span class="hljs-comment">// 输出解密后的结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Flag: %s\n&quot;</span>, flag);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="带密钥的异或"><a href="#带密钥的异或" class="headerlink" title="带密钥的异或"></a>带密钥的异或</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 密文</span><br>v6 = []<br><br><span class="hljs-comment"># 密钥</span><br>key = <span class="hljs-string">b&quot;&quot;</span><br>key_length = <span class="hljs-built_in">len</span>(key)<br><br><span class="hljs-comment"># 逆向解密，得到 flag</span><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v6)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):  <span class="hljs-comment"># 每个 v6[i] 是 4 个字节</span><br>        flag_byte = (v6[i] &gt;&gt; (j * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>  <span class="hljs-comment"># 提取 v6[i] 的每个字节</span><br>        key_byte = key[(i * <span class="hljs-number">4</span> + j) % key_length]  <span class="hljs-comment"># 密钥循环使用</span><br>        decrypted_byte = flag_byte ^ key_byte  <span class="hljs-comment"># 逆向异或得到原始字节</span><br>        flag.append(decrypted_byte)<br><br><span class="hljs-comment"># 输出解密得到的 flag</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(flag).decode())<br></code></pre></td></tr></table></figure><h2 id="大小写转化"><a href="#大小写转化" class="headerlink" title="大小写转化"></a>大小写转化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Decrypt</span>(<span class="hljs-params">msg, key</span>):<br>    Lenth = <span class="hljs-built_in">len</span>(key)<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br><br>    upper_base = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    lower_base = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    KEY = [<span class="hljs-built_in">ord</span>(key.upper()[_]) - upper_base <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Lenth)]<br><br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> msg:<br>        tmp_key = KEY[index % Lenth]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m.isalpha():<br>            result += m<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-keyword">if</span> m.isupper():<br>            result += <span class="hljs-built_in">chr</span>(upper_base + (<span class="hljs-built_in">ord</span>(m) - upper_base - tmp_key) % <span class="hljs-number">26</span>)<br>        <span class="hljs-keyword">else</span>:<br>            result += <span class="hljs-built_in">chr</span>(lower_base + (<span class="hljs-built_in">ord</span>(m) - lower_base - tmp_key) % <span class="hljs-number">26</span>)<br>        index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment"># 用你知道的key</span><br>key = <span class="hljs-string">&quot;oWccl&quot;</span>  <span class="hljs-comment"># 你需要知道加密时生成的密钥</span><br>encrypted_msg = <span class="hljs-string">&quot;0lCcop&#123;oyd94092-g8mq-4963-88b6-4helrxdhm6q7&#125;&quot;</span><br><br><span class="hljs-comment"># 解密</span><br>decrypted_flag = Decrypt(encrypted_msg, key)<br><span class="hljs-built_in">print</span>(decrypted_flag)<br></code></pre></td></tr></table></figure><h2 id="大小写转化-简单移位"><a href="#大小写转化-简单移位" class="headerlink" title="大小写转化+简单移位"></a>大小写转化+简单移位</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Decrypt</span>(<span class="hljs-params">msg, key</span>):<br>    Lenth = <span class="hljs-built_in">len</span>(key)<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br><br>    upper_base = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br>    lower_base = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    KEY = [<span class="hljs-built_in">ord</span>(key.upper()[_]) - upper_base <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Lenth)]<br><br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> msg:<br>        tmp_key = KEY[index % Lenth]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> m.isalpha():<br>            result += m<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-keyword">if</span> m.isupper():<br>            result += <span class="hljs-built_in">chr</span>(upper_base + (<span class="hljs-built_in">ord</span>(m) - upper_base - tmp_key) % <span class="hljs-number">26</span>)<br>        <span class="hljs-keyword">else</span>:<br>            result += <span class="hljs-built_in">chr</span>(lower_base + (<span class="hljs-built_in">ord</span>(m) - lower_base - tmp_key) % <span class="hljs-number">26</span>)<br>        index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment"># 用你知道的key</span><br>key = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 加密时生成的密钥（如果你知道部分信息，你可以逆推出来）</span><br>encrypted_msg = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 移位的密文</span><br><br><span class="hljs-comment"># 解密</span><br>decrypted_flag = Decrypt(encrypted_msg, key)<br><span class="hljs-built_in">print</span>(decrypted_flag)<br></code></pre></td></tr></table></figure><h2 id="简单的RSA-MD5处理flag"><a href="#简单的RSA-MD5处理flag" class="headerlink" title="简单的RSA+MD5处理flag"></a>简单的RSA+MD5处理flag</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert, gcd<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-comment"># 已知的公钥</span><br>N = <br>e = <br><span class="hljs-comment"># 使用 N 来尝试分解成 p 和 q</span><br>p=<br>q=<br><br><span class="hljs-comment"># 计算 phi——逆元</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算私钥 d</span><br>d = invert(e, phi)<br><br><span class="hljs-comment"># 已知的密文 c</span><br>c = <br><br><span class="hljs-comment"># 解密</span><br>m_decrypted = <span class="hljs-built_in">pow</span>(c, d, N)<br><br>md5 = hashlib.md5()<br>md5.update(<span class="hljs-built_in">str</span>(m_decrypted).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-comment"># 生成 flag</span><br>flag =md5.hexdigest()<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="使用z3求解"><a href="#使用z3求解" class="headerlink" title="使用z3求解"></a>使用z3求解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 创建 Z3 Solver</span><br>solver = Solver()<br><br><span class="hljs-comment"># 创建变量，如果进行位操作的话，需要使用 BitVec 类型</span><br>v13 = BitVec(<span class="hljs-string">&#x27;v13&#x27;</span>, <span class="hljs-number">64</span>)  <span class="hljs-comment"># 64 位</span><br>v14 = BitVec(<span class="hljs-string">&#x27;v14&#x27;</span>, <span class="hljs-number">64</span>)<br>v15 = BitVec(<span class="hljs-string">&#x27;v15&#x27;</span>, <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 添加条件</span><br>solver.add()<br>solver.add()<br>solver.add()<br><br><span class="hljs-comment"># 求解</span><br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    model = solver.model()<br>    v13_val = model[v13].as_long()<br>    v14_val = model[v14].as_long()<br>    v15_val = model[v15].as_long()<br>    <br>    <span class="hljs-comment"># 打印结果</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found values: v13 = <span class="hljs-subst">&#123;v13_val:#x&#125;</span>, v14 = <span class="hljs-subst">&#123;v14_val:#x&#125;</span>, v15 = <span class="hljs-subst">&#123;v15_val:#x&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="pwn计算的小脚本"><a href="#pwn计算的小脚本" class="headerlink" title="pwn计算的小脚本"></a>pwn计算的小脚本</h2><p>不知道怎么修改，之间照搬过来吧，跑完就可以直接读取 flag 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> string<br> <br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br> <br>p = remote(<span class="hljs-string">&#x27;47.97.58.52&#x27;</span>, <span class="hljs-number">40010</span>) <span class="hljs-comment">#环境地址，端口</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_after_clean</span>(<span class="hljs-params">content: <span class="hljs-built_in">bytes</span> = <span class="hljs-string">b&quot;&quot;</span>, until: <span class="hljs-built_in">bytes</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                     timeout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    <span class="hljs-keyword">if</span> until <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        p.recvuntil(flat(until))<br>    <span class="hljs-keyword">else</span>:<br>        received = p.clean(timeout)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> no_show:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[$]received:\n<span class="hljs-subst">&#123;received.decode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)&#125;</span>&quot;</span>)<br>    p.send(flat(content))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendline_after_clean</span>(<span class="hljs-params">content: <span class="hljs-built_in">bytes</span> = <span class="hljs-string">b&quot;&quot;</span>, until: <span class="hljs-built_in">bytes</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                         timeout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    send_after_clean([content, p.newline], until, timeout, no_show)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">interactive_after_clean</span>(<span class="hljs-params">timeout: <span class="hljs-built_in">int</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    received = p.clean(timeout)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> no_show:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[$]received:\n<span class="hljs-subst">&#123;received&#125;</span>&quot;</span>)<br>    p.interactive()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">formula_compute</span>(<span class="hljs-params">formula: <span class="hljs-built_in">bytes</span>, precise: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(formula, <span class="hljs-built_in">bytes</span>):<br>        formula = formula.decode(<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>    formula = formula.strip()<br>    formula = formula.strip(<span class="hljs-string">&quot;\n&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;**&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;÷&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> precise:<br>        formula = formula.replace(<span class="hljs-string">&quot;//&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>        formula = formula.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;//&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">eval</span>(formula)), encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)<br> <br>p.recvuntil(<span class="hljs-string">b&#x27;Welcome to the calc game!\n&#x27;</span>)  <span class="hljs-comment">#p.sendlineafter(some_string, payload) 接收到 some_string 后, 发送你的 payload，加个换行</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>p.recvline(keepends=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#p.recvuntil(b&#x27; &#x27;,drop=True) #p.recvuntil(some_string) 接收到 some_string 为止</span><br>s=p.recvuntil(<span class="hljs-string">b&#x27; =&#x27;</span>,drop=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#p.recvall()</span><br><span class="hljs-built_in">print</span>(s)<br>res=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">eval</span>(s)).encode()<br>p.sendlineafter(<span class="hljs-string">b&quot; &quot;</span>, res)<br>p.recvline() <span class="hljs-comment">#p.recvline() 接收一行输出</span><br><br>p.interactive() <span class="hljs-comment">#交互模式</span><br></code></pre></td></tr></table></figure><p>忘记哪个是真的能用的了，等下次跑出来再改吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自动生成头部</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> p64, p32, u32, u64, p8, p16<br><br>if_32: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span><br>if_debug: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span><br>pg = p32 <span class="hljs-keyword">if</span> if_32 <span class="hljs-keyword">else</span> p64<br>ug = u32 <span class="hljs-keyword">if</span> if_32 <span class="hljs-keyword">else</span> u64<br>context(log_level=<span class="hljs-string">&quot;debug&quot;</span>, arch=<span class="hljs-string">&quot;i386&quot;</span> <span class="hljs-keyword">if</span> if_32 <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;amd64&quot;</span>, os=<span class="hljs-string">&quot;linux&quot;</span>)<br>p=remote(<span class="hljs-string">&quot;47.97.58.52&quot;</span>,<span class="hljs-number">40010</span>)<br><br><span class="hljs-comment"># 下面是自定义的一些工具函数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_after_clean</span>(<span class="hljs-params">content: <span class="hljs-built_in">bytes</span> = <span class="hljs-string">b&quot;&quot;</span>, until: <span class="hljs-built_in">bytes</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                     timeout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    <span class="hljs-keyword">if</span> until <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        p.recvuntil(flat(until))<br>    <span class="hljs-keyword">else</span>:<br>        received = p.clean(timeout)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> no_show:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[$]received:\n<span class="hljs-subst">&#123;received.decode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)&#125;</span>&quot;</span>)<br>    p.send(flat(content))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendline_after_clean</span>(<span class="hljs-params">content: <span class="hljs-built_in">bytes</span> = <span class="hljs-string">b&quot;&quot;</span>, until: <span class="hljs-built_in">bytes</span> = <span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                         timeout: <span class="hljs-built_in">float</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    send_after_clean([content, p.newline], until, timeout, no_show)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">interactive_after_clean</span>(<span class="hljs-params">timeout: <span class="hljs-built_in">int</span> = <span class="hljs-number">0.05</span>, no_show: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span></span>):<br>    received = p.clean(timeout)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> no_show:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[$]received:\n<span class="hljs-subst">&#123;received&#125;</span>&quot;</span>)<br>    p.interactive()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">formula_compute</span>(<span class="hljs-params">formula: <span class="hljs-built_in">bytes</span>, precise: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(formula, <span class="hljs-built_in">bytes</span>):<br>        formula = formula.decode(<span class="hljs-string">&quot;UTF-8&quot;</span>)<br>    formula = formula.strip()<br>    formula = formula.strip(<span class="hljs-string">&quot;\n&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;**&quot;</span>)<br>    formula = formula.replace(<span class="hljs-string">&quot;÷&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> precise:<br>        formula = formula.replace(<span class="hljs-string">&quot;//&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>        formula = formula.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;//&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">eval</span>(formula)), encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    <span class="hljs-comment"># 从标准输出流获取题目</span><br>    <span class="hljs-comment"># 会一直读到b&quot;.&quot;为止</span><br>    question = p.recvuntil(<span class="hljs-string">b&quot;.&quot;</span>)<br>    <span class="hljs-comment"># 工具函数自动计算结果</span><br>    <span class="hljs-comment"># 注意，输入的题目必须是有意义的算式，不能有等号</span><br>    <span class="hljs-comment"># 比如可以是1+2, 1÷2</span><br>    <span class="hljs-comment"># 如果需要小数，定义参数precise=True</span><br>    answer = formula_compute(question)<br>    <span class="hljs-comment"># 在结尾加上回车发送answer</span><br>    <span class="hljs-comment"># 直到读到&quot;answer:&quot;才开始发送</span><br>    <span class="hljs-comment"># 也可以不定义until字符串，脚本会在程序没有输出的时候发送（但如果网络不好，脚本可能判断出错）</span><br>    sendline_after_clean(answer, <span class="hljs-string">&quot;answer:&quot;</span>)<br><br><span class="hljs-comment"># 进入人机交互模式</span><br>interactive_after_clean()<br></code></pre></td></tr></table></figure><h2 id="随机数-奇偶分离"><a href="#随机数-奇偶分离" class="headerlink" title="随机数+奇偶分离"></a>随机数+奇偶分离</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 加密后的数组，用逗号隔开</span><br>    std::array&lt;<span class="hljs-type">uint64_t</span>, 4&gt; v13 = &#123;<br>    &#125;;<br><br>    <span class="hljs-comment">// 密钥</span><br>    <span class="hljs-type">uint8_t</span> initialRandom = ;<br>    <br>    <span class="hljs-comment">// 解密结果字符串</span><br>    std::string decrypted;<br><br>    <span class="hljs-comment">// 解密过程</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; ++i) &#123;<br>        <span class="hljs-type">uint8_t</span> xorValue;<br><br>        <span class="hljs-comment">// 奇偶选择XOR值</span><br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            xorValue = initialRandom + <span class="hljs-number">3</span>; <span class="hljs-comment">// 偶数位置</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            xorValue = initialRandom; <span class="hljs-comment">// 奇数位置</span><br>        &#125;<br><br>        <span class="hljs-comment">// 对应的加密值</span><br>        <span class="hljs-type">uint8_t</span> encryptedChar = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint8_t</span>&gt;(v13[i / <span class="hljs-number">8</span>] &gt;&gt; ((i % <span class="hljs-number">8</span>) * <span class="hljs-number">8</span>)); <span class="hljs-comment">// 取得v13的当前字符</span><br><br>        <span class="hljs-comment">// 解密字符</span><br>        <span class="hljs-type">uint8_t</span> originalChar = encryptedChar ^ xorValue;<br><br>        <span class="hljs-comment">// 将字符添加到解密字符串</span><br>        decrypted += <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">char</span>&gt;(originalChar);<br>    &#125;<br><br>    <span class="hljs-comment">// 输出解密结果</span><br>    std::cout &lt;&lt; decrypted &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="高低位组合"><a href="#高低位组合" class="headerlink" title="高低位组合"></a>高低位组合</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *encoded_str, <span class="hljs-type">int</span> length)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> high = (encoded_str[i] &amp; <span class="hljs-number">0xF0</span>) &gt;&gt; <span class="hljs-number">4</span>;  <span class="hljs-comment">// 提取高4位</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> low = (encoded_str[i] &amp; <span class="hljs-number">0x0F</span>) &lt;&lt; <span class="hljs-number">4</span>;   <span class="hljs-comment">// 提取低4位</span><br>        encoded_str[i] = high | low;                        <span class="hljs-comment">// 组合高位和低位</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Encoded data</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> encdata[] = &#123;<br>        <br>    &#125;;<br>    <br>    <span class="hljs-type">int</span> length = <span class="hljs-built_in">sizeof</span>(encdata) / <span class="hljs-built_in">sizeof</span>(encdata[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-comment">// Decode the data</span><br>    <span class="hljs-built_in">decode</span>(encdata, length);<br><br>    <span class="hljs-comment">// Output the decoded string</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, encdata[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="爆破程序"><a href="#爆破程序" class="headerlink" title="爆破程序"></a>爆破程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-comment"># 定义可执行文件的路径</span><br>exe_path = <span class="hljs-string">&quot;&quot;</span>  <span class="hljs-comment"># 替换为你程序的路径</span><br><br><span class="hljs-comment"># 固定前缀和后缀</span><br>prefix = <span class="hljs-string">&quot;&quot;</span><br>suffix = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment"># 字符集为数字和小写字母</span><br>charset = string.ascii_lowercase + string.digits<br><br><span class="hljs-comment"># 生成自定义输入</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_inputs</span>():<br>    <span class="hljs-keyword">for</span> combo1 <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">4</span>):  <span class="hljs-comment"># 第一个 4 字节部分</span><br>        <span class="hljs-keyword">for</span> combo2 <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">4</span>):  <span class="hljs-comment"># 第二个 4 字节部分</span><br>            <span class="hljs-keyword">for</span> combo3 <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">4</span>):  <span class="hljs-comment"># 第三个 4 字节部分</span><br>                middle = <span class="hljs-string">&#x27;&#x27;</span>.join(combo1) + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(combo2) + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(combo3)  <span class="hljs-comment"># 连接三个部分</span><br>                <span class="hljs-keyword">yield</span> prefix + middle + suffix<br><br><span class="hljs-comment"># 运行程序并传递生成的输入</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_program_with_input</span>(<span class="hljs-params">input_str</span>):<br>    <span class="hljs-keyword">try</span>:<br>        process = subprocess.Popen([exe_path], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)<br>        output, error = process.communicate(<span class="hljs-built_in">input</span>=input_str.encode())<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Congratulations&quot;</span> <span class="hljs-keyword">in</span> output.decode() <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;Correct&quot;</span> <span class="hljs-keyword">in</span> output.decode():  <span class="hljs-comment"># 替换为程序的正确输出标志</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, output.decode()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, output.decode()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-built_in">str</span>(e)<br><br><span class="hljs-comment"># 使用生成器进行爆破</span><br><span class="hljs-keyword">for</span> generated_input <span class="hljs-keyword">in</span> generate_inputs():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Trying input: <span class="hljs-subst">&#123;generated_input&#125;</span>&quot;</span>)<br>    success, result = run_program_with_input(generated_input)<br><br>    <span class="hljs-keyword">if</span> success:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Success! The correct input is: <span class="hljs-subst">&#123;generated_input&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Program output: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment">#print(f&quot;Failed attempt with input: &#123;generated_input&#125;&quot;)</span><br>        <span class="hljs-comment">#print(f&quot;Program output: &#123;result&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="二次剩余-中国剩余定理"><a href="#二次剩余-中国剩余定理" class="headerlink" title="二次剩余+中国剩余定理"></a>二次剩余+中国剩余定理</h2><p>2024-0xGame-w1 的 wp 里偷的，以后有需要直接扒过来改改就能用~</p><p>多解是正常的，跑久一点也能理解，四个解带进去排除一下就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert, gcd, gcdext<br>Pub_Key = (<span class="hljs-number">1022053332886345327</span>, <span class="hljs-number">294200073186305890</span>)<br>Encrypt_msg = <span class="hljs-number">107033510346108389</span><br>m = <span class="hljs-number">759871216848924391</span><br>N = Pub_Key[<span class="hljs-number">0</span>]<br>e = Pub_Key[<span class="hljs-number">1</span>]<br>c = Encrypt_msg<br><br><span class="hljs-comment">#import q、p form factordb</span><br>q = <span class="hljs-number">970868179</span><br>p = <span class="hljs-number">1052721013</span><br>phi = (q-<span class="hljs-number">1</span>)*(p-<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crt</span>(<span class="hljs-params">b,m</span>):<br>    <span class="hljs-comment">#判断是否互素</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(m)):<br>            <span class="hljs-keyword">if</span> gcd(m[i],m[j]) != <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;m中含有不是互余的数&quot;</span>)<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>    <span class="hljs-comment">#乘积</span><br>    M = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        M *= m[i]<br>    <span class="hljs-comment">#求M/mi</span><br>    Mm = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        Mm.append(M // m[i])<br>    <span class="hljs-comment">#求Mm[i]的乘法逆元</span><br>    Mm_ = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        _,a,_ = gcdext(Mm[i],m[i])<br>        Mm_.append(<span class="hljs-built_in">int</span>(a % m[i]))<br>    <span class="hljs-comment">#求MiM&#x27;ibi的累加</span><br>    y = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        <span class="hljs-comment">#print(Mm[i] * Mm_[i] * b[i])</span><br>        y += (Mm[i] * Mm_[i] * b[i])<br>    y = y % M<br>    <span class="hljs-keyword">return</span> y<br><br><span class="hljs-comment">#直接在Zmod p、q下求m^2 ，也可以在Zmod N下求解m^2后，再⽤因⼦取余:</span><br>e0 = e//<span class="hljs-number">2</span><br>d1 = invert(e0,p-<span class="hljs-number">1</span>)<br>m1 = <span class="hljs-built_in">pow</span>(c,d1,p)<br>d2 = invert(e0,q-<span class="hljs-number">1</span>)<br>m2 = <span class="hljs-built_in">pow</span>(c,d2,q)<br><br><span class="hljs-comment">#直接⽤遍历开根：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gao</span>(<span class="hljs-params">x,p</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(i,<span class="hljs-number">2</span>,p) == x:<br>            result.append(i)<br>    <span class="hljs-keyword">return</span> result<br><br>m1_ = Gao(m1,p)<br>m2_ = Gao(m2,q)<br><br><span class="hljs-built_in">print</span>(m1_,m2_)<br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MD5</span>(<span class="hljs-params">m</span>):<span class="hljs-keyword">return</span> md5(<span class="hljs-built_in">str</span>(m).encode()).hexdigest()<br><br>m1_ = [<span class="hljs-number">215896886</span>, <span class="hljs-number">836824127</span>]<br>m2_ = [<span class="hljs-number">215973055</span>, <span class="hljs-number">754895124</span>]<br><br><span class="hljs-keyword">for</span> m1 <span class="hljs-keyword">in</span> m1_:<br>    <span class="hljs-keyword">for</span> m2 <span class="hljs-keyword">in</span> m2_:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;0xGame&#123;&#x27;</span> + MD5(crt([m1,m2],[p,q])) + <span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"> 0xGame&#123;15820afdb9a129e89e40e57f40ff8de9&#125;</span><br><span class="hljs-string"> 0xGame&#123;f4107420d94cc7037114376d8566d4ef&#125;</span><br><span class="hljs-string"> 0xGame&#123;3932f6728585abbf751a212f69276d3e&#125;</span><br><span class="hljs-string"> 0xGame&#123;127016d0be858ef48a99723710ad4d49&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024_SACC_安全组招新</title>
    <link href="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/"/>
    <url>/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="2024-SACC-安全组招新题wp"><a href="#2024-SACC-安全组招新题wp" class="headerlink" title="2024_SACC_安全组招新题wp"></a>2024_SACC_安全组招新题wp</h2><p>题目链接：<a href="https://github.com/tsglz/tsglz.github.io/releases/download/2024-SACC/2024-SACC.rar">https://github.com/tsglz/tsglz.github.io/releases/download/2024-SACC/2024-SACC.rar</a></p><p>密码：2024-SACC</p><h3 id="1-just-click"><a href="#1-just-click" class="headerlink" title="1_just_click"></a>1_just_click</h3><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/1_open.png" alt="1_open"></p><p>直接 IDA 打开，打开 <code>omg(0)</code> 即为 flag</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/1_main.png" alt="1_main"></p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/1_flag.png" alt="1_flag"></p><p>如果你对 <code>xyz(p)</code> 感到好奇点开看了下，你就会发现进行了一个 <code>异或0x55</code> 的操作，但实际上它并没有实质性的影响</p><h2 id="2-another-three-click"><a href="#2-another-three-click" class="headerlink" title="2_another_three_click"></a>2_another_three_click</h2><p>打开看一眼，看不懂，拖 IDA</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/2_open.png" alt="2_open"></p><p>看到 3 个 <code>test_func</code> 函数，合理推断 flag 是 三段式，点击进去看看</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/2_main.png" alt="2_main"></p><p>进入汇编界面，很容易看到三段 flag，一、三两段是明文，第二段需要转换一下</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/2_thr_sec.png" alt="2_thr_sec"></p><p>按a即可，将 flag 拼好即可提交</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/2_to_str.png" alt="2_to_str"></p><h2 id="3-MaybeXorAndRot13"><a href="#3-MaybeXorAndRot13" class="headerlink" title="3_MaybeXorAndRot13"></a>3_MaybeXorAndRot13</h2><p>打开文件，输出的是数字</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/3_open.png" alt="3_open"></p><p>然后打开 IDA 进行查看，同样是一串数字，可以看到进行了 <code>异或0x55</code> 的操作，在刚进入 IDA 的时候，其实能直接看到异或之前的内容，如果不确定，可以写个脚本验证一下</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/3_main.png" alt="3_main"></p><p>python：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;54 102 57 32 49 29 33 34 55 56 19 51 52 19 108 47 24 2 19 45 13 102 57 59 51 4 104 104&quot;</span><br>b=a.split()<br>c=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,b))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    d = <span class="hljs-built_in">chr</span>(c[i]^<span class="hljs-number">0x55</span>)<br>    <span class="hljs-built_in">print</span>(d,end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">28</span>]= &#123;<span class="hljs-number">54</span>,<span class="hljs-number">102</span>,<span class="hljs-number">57</span>,<span class="hljs-number">32</span>,<span class="hljs-number">49</span>,<span class="hljs-number">29</span>,<span class="hljs-number">33</span>,<span class="hljs-number">34</span>,<span class="hljs-number">55</span>,<span class="hljs-number">56</span>,<span class="hljs-number">19</span>,<span class="hljs-number">51</span>,<span class="hljs-number">52</span>,<span class="hljs-number">19</span>,<span class="hljs-number">108</span>,<span class="hljs-number">47</span>,<span class="hljs-number">24</span>,<span class="hljs-number">2</span>,<span class="hljs-number">19</span>,<span class="hljs-number">45</span>,<span class="hljs-number">13</span>,<span class="hljs-number">102</span>,<span class="hljs-number">57</span>,<span class="hljs-number">59</span>,<span class="hljs-number">51</span>,<span class="hljs-number">4</span>,<span class="hljs-number">104</span>,<span class="hljs-number">104</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">28</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a[i]^<span class="hljs-number">0x55</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解出来是一样的，熟练的一眼 base64</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">c3ludHtwbmFfaF9zMWFxX3lnfQ==<br></code></pre></td></tr></table></figure><p>得到如下内容，很明显这还不是最终的 flag，根据提示，还用到了 Rot13</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">synt&#123;pna_h_s1aq_yg&#125;<br></code></pre></td></tr></table></figure><p>解密可得</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">flag&#123;can_u_f1nd_lt&#125;<br></code></pre></td></tr></table></figure><h2 id="4-in-string"><a href="#4-in-string" class="headerlink" title="4_in_string"></a>4_in_string</h2><p>这道题特别 ez，一打开就能看到一个半成品的 flag，提示中给的 in_string 只是提供一个快速查找有用信息的方法</p><p>string位置：View &gt;&gt; Open subviews &gt;&gt; string</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">flag&#123;RighT t0 g3t f1Ag&#125;<br></code></pre></td></tr></table></figure><p>如果直接提交 flag，会发现 flag 是错误的，</p><p>打开 main 函数，刚才看到的 flag 就在 <code>text_57</code> 里面</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/4_main.png" alt="4_main"></p><p>接着在 <code>change</code> 函数中会看到替换的步骤，32 &gt;&gt; 95，熟练的知道是 ‘_‘替换了 ‘ ‘</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/4_replace.png" alt="4_replace"></p><p>如果不清楚可以查 ascii 码表，在汇编中也能应证</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/4_rep.png" alt="4_rep"></p><p>给半成品 flag 补上下划线即可</p><h2 id="5-oh-upx"><a href="#5-oh-upx" class="headerlink" title="5_oh_upx"></a>5_oh_upx</h2><p>不了解的可能会有点难受，upx 壳是常用压缩壳，这里使用的是未经魔改的版本，只需要去网上下一个就好</p><p>如果不脱壳，IDA 看到的代码就是乱七八糟的一坨，但其实不影响运行</p><p>首先进行脱壳 <code>upx -d</code> 即可，不清楚使用方法可以浏览器查一下，非常清楚</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/5_unpack.png" alt="5_unpack"></p><p>然后使用 IDA 打开，在下方直接能看到两段 flag ，根据提示，flag 一共有三段</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/5_open.png" alt="5_open"></p><p>在 main 函数中直接能找到中间缺失的一段，拼起来即可</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/5_main.png" alt="5_main"></p><h2 id="6-inline-assembly"><a href="#6-inline-assembly" class="headerlink" title="6_inline_assembly"></a>6_inline_assembly</h2><p>这道题用到了内联汇编，这会一定程度上阻碍静态分析，但这里我并没有做过多的处理，所以可以直接在 String 里找到</p><p>如果对 Windows 比较熟悉会知道，这段程序是 32 位的，不知道也没关系，DIE 可以进行分析</p><p><img src="/2024/10/17/2024-SACC-%E5%AE%89%E5%85%A8%E7%BB%84%E6%8B%9B%E6%96%B0/6_die.png" alt="6_die"></p><p>用 32位 DIE 打开</p><p>打开 String，直接能看到 flag <code>flag&#123;May23_th1s_1s_the_flag&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF_Re</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF_wps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo环境搭建"><a href="#hexo环境搭建" class="headerlink" title="hexo环境搭建"></a>hexo环境搭建</h1><p>搭建个人博客使用：Github + Hexo</p><p>如果有条件，可以部署在自己的服务器上，发布到自己服务器的话，Negix 代理</p><h2 id="一、前置条件"><a href="#一、前置条件" class="headerlink" title="一、前置条件"></a>一、前置条件</h2><ul><li>Github 账号<ul><li>都能搭建个人博客了肯定会用 Github 吧~</li></ul></li><li>NodeJS<ul><li>nodejs 要好好配置哦，不然之后会很崩溃的，嘻</li><li>可以参考下这个<a href="https://blog.csdn.net/yaorongke/article/details/119084295">NodeJS安装及配置(Windows)</a></li></ul></li><li>Git，(理论上cmd也是可以的，我就是用的cmd)</li></ul><h2 id="二、Github部分"><a href="#二、Github部分" class="headerlink" title="二、Github部分"></a>二、Github部分</h2><ul><li>新建一个仓库</li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/create_repo.png" alt="create_repo"></p><ul><li>按要求填写</li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/repo_fillin.png" alt="repo_fillin"></p><ul><li>测试一下是否能正常使用<ul><li>在新仓库中添加 <code>index.html</code></li><li>保存</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>tsglz<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>This is tsglz<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在 settings 的 page 中 可以访问到自己的网站<ul><li>如果显示正常，即部署成功，可以进行下一步</li><li>如果不成功，自查上面的步骤是否出现遗漏</li></ul></li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/settings_deploy.png" alt="settings_deploy"></p><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><ul><li>除了一个仓库，你还需要一个 Token</li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/github_settings.png" alt="github_settings"></p><ul><li>注意使用 classic 哦~</li><li>select 一个 repo 就能用了</li><li>expiration 按照需要配置<ul><li>并不建议一直用一个</li></ul></li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/github_Token.png" alt="github_Token"></p><h2 id="三、Hexo部分"><a href="#三、Hexo部分" class="headerlink" title="三、Hexo部分"></a>三、Hexo部分</h2><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure><ul><li>查看版本</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo <span class="hljs-literal">-v</span><br></code></pre></td></tr></table></figure><ul><li>出现版本号<ul><li>有一大串是正常情况，请不要感到害怕</li></ul></li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/version.png" alt="version"></p><h3 id="2-创建-hexo-blog"><a href="#2-创建-hexo-blog" class="headerlink" title="2.创建 hexo-blog"></a>2.创建 hexo-blog</h3><ul><li>创建一个项目 <code>hexo-blog</code> 并初始化</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo init hexo<span class="hljs-literal">-blog</span><br><span class="hljs-built_in">cd</span> hexo<span class="hljs-literal">-blog</span><br>npm install<br></code></pre></td></tr></table></figure><ul><li>更换主题</li></ul><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/v1.9.7">Release 1.9.7 · fluid-dev&#x2F;hexo-theme-fluid (github.com)</a></p><ul><li><p>下载解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><ul><li>注意，fluid目录下应该直接是多个文件</li><li>如果存在多余的文件夹，请移出内部文件后删除它</li></ul></li><li><p>修改根目录下的 <code>_config.yml</code>：</p></li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/sets_1.png" alt="sets_1"></p><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/sets_2.png" alt="sets_2"></p><p><strong>创建「关于页」</strong></p><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new page about<br></code></pre></td></tr></table></figure><ul><li>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">---<br>title: about<br>date: xxxxxx<br>layout: about<br>---<br></code></pre></td></tr></table></figure><ul><li>注意<strong>冒号</strong>后面有空格，否则会报错</li></ul><h4 id="关于移动-hexo-blog-的补充说明"><a href="#关于移动-hexo-blog-的补充说明" class="headerlink" title="关于移动 hexo-blog 的补充说明"></a>关于移动 hexo-blog 的补充说明</h4><ul><li>一般来说全局状态下的 hexo-blog 会出现在 <code>C:\Windows\System32</code> 中</li><li>但对于一些 C盘 看上去不太友好（快爆炸）的人来说（比如我），还是更希望把它移到别的地方去</li></ul><ol><li><code>C:\Windows\System32\hexo-blog</code>找到那个文件夹</li><li>把它剪切到你希望它出现的位置<ul><li>这个时候使用 <code>cd hexo-blog</code> 大概率是不成功的</li><li>为了让我们更好的使用它，可以配置一下环境变量（如果你连环境变量在哪里或者是什么都不知道的话，问问万能的Google吧）</li></ul></li><li>把你的路径塞到 path 里</li></ol><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/path.png" alt="path"></p><h3 id="3-启动！"><a href="#3-启动！" class="headerlink" title="3.启动！"></a>3.启动！</h3><ul><li>先在本地运行下</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo g<br>hexo server<br></code></pre></td></tr></table></figure><ul><li>如果启动不了，请使用 <code>管理员模式</code> 进行尝试</li></ul><h3 id="4-创建文章"><a href="#4-创建文章" class="headerlink" title="4.创建文章"></a>4.创建文章</h3><ul><li>根目录下 <code>_config.yml</code><ul><li>在生成文章的时候生成一个同名的资源目录用于存放图片文件</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li>插入图片<ul><li>这种方法在 md 编辑器里看不到图片，但在博客里是可以看到的</li><li>更多方法参考官方文档（最下面会给的，别急）</li></ul></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">![图片引用方法二](test.png)<br></code></pre></td></tr></table></figure><ul><li>想要使图片显示出来，需要装一个依赖<ul><li>它可以帮你更好地对路径进行转换</li></ul></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install https://github.com/CodeFalling/hexo<span class="hljs-literal">-asset-image</span> <span class="hljs-literal">--save</span><br></code></pre></td></tr></table></figure><h2 id="四、fluid-部分"><a href="#四、fluid-部分" class="headerlink" title="四、fluid 部分"></a>四、fluid 部分</h2><h3 id="覆盖配置"><a href="#覆盖配置" class="headerlink" title="覆盖配置"></a>覆盖配置</h3><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><ul><li>好东西就要狠狠学习</li><li>建议马上配置好</li></ul><h3 id="1-申请LeanCloud账号并创建应用"><a href="#1-申请LeanCloud账号并创建应用" class="headerlink" title="1.申请LeanCloud账号并创建应用"></a>1.申请LeanCloud账号并创建应用</h3><p><a href="https://console.leancloud.cn/account/profile">开发者信息 · 账号 · LeanCloud</a></p><ul><li>注册一下<ul><li>如果可以请使用国际版，不然你的浏览量是看不到的<ul><li>国际版的使用可能需要一些<strong>特殊的小技巧</strong></li></ul></li><li>笔者在测试过程中发现评论功能国际版有些问题（笔者是不会承认自己是菜鸡的QAQ）<ul><li>个人建议两个都注册下（以防万一）</li></ul></li></ul></li><li>验证邮箱</li><li>创建应用<ul><li>开发版就够了</li></ul></li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/create_application.png" alt="create_application"></p><ul><li><code>设置-&gt;应用凭证</code>，找到 <code>AppID</code> 和 <code>AppKey</code></li><li>留着等下用</li></ul><h3 id="2-来个记录浏览数的功能吧"><a href="#2-来个记录浏览数的功能吧" class="headerlink" title="2. 来个记录浏览数的功能吧"></a>2. 来个记录浏览数的功能吧</h3><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/web_analytics.png" alt="web_analytics"></p><ul><li>配置一下 <code>app_id</code> 和 <code>app_key</code></li><li>顺手把底部的也解决一下吧</li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/bottom.png" alt="bottom"></p><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/set_id_key.png" alt="set_id_key"></p><ul><li>打开计数功能，统计来源改为 <code>leancloud</code></li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/set_source.png" alt="set_source"></p><ul><li><strong>注：统计的功能或许也需要一些特殊的小技巧，当你看不到眼睛和浏览次数的时候，请不用太过着急</strong><ul><li>以下是示例</li><li>如果你能看到它，恭喜你，你成功了~</li></ul></li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/example_by_tsglz.png" alt="example_by_tsglz"></p><h3 id="3-在来个评论的功能吧"><a href="#3-在来个评论的功能吧" class="headerlink" title="3.在来个评论的功能吧"></a>3.在来个评论的功能吧</h3><ul><li>先这样</li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/comment.png" alt="comment"></p><ul><li>再这样</li></ul><p><img src="/2024/04/15/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/valine.png" alt="valine"></p><ul><li>评论的查看在 <code>leancloud</code> 的 <code>数据存储 &gt;&gt; 结构化数据 &gt;&gt; Comment</code> 里<ul><li>删除也在这里，不要因为测试输入的乱码删不掉而苦恼 ：)</li></ul></li></ul><h2 id="五、一些使用技巧"><a href="#五、一些使用技巧" class="headerlink" title="五、一些使用技巧"></a>五、一些使用技巧</h2><h3 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">- 清除缓存：hexo clean<br>- 生成：hexo g<br>- 部署到远端：hexo d<br>- 在自己的主机上部署：hexo s<br>- 创建文章：hexo new post $文章名$<br>- 图片插入方法一：&#123;% asset_img test.png 图片引用方法一 %&#125; <br>- 图片插入方法二：![图片引用方法二](test.png)<br></code></pre></td></tr></table></figure><h3 id="关于多级分类"><a href="#关于多级分类" class="headerlink" title="关于多级分类"></a>关于多级分类</h3><h4 id="父子分类"><a href="#父子分类" class="headerlink" title="父子分类"></a>父子分类</h4><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> 一级<br><span class="hljs-literal">-</span> 二级<br></code></pre></td></tr></table></figure><h4 id="同级分类"><a href="#同级分类" class="headerlink" title="同级分类"></a>同级分类</h4><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [一级,二级,二级中的1]<br><span class="hljs-literal">-</span> [一级,二级,二级中的2]<br></code></pre></td></tr></table></figure><p>此时该文章同时处于 <code>一级-二级</code> 下的 <code>1和2</code> 中</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><ul><li><a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程_hexo博客-CSDN博客</a></li></ul><h4 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a>fluid</h4><ul><li><a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></li><li><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a></li></ul><h4 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h4><p><a href="https://valine.js.org/quickstart.html">快速开始 | Valine 一款快速、简洁且高效的无后端评论系统。</a></p><p>如有遗漏，欢迎补充 ：）</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>This is Tsglz</title>
    <link href="/2024/04/14/This%20is%20Tsglz/"/>
    <url>/2024/04/14/This%20is%20Tsglz/</url>
    
    <content type="html"><![CDATA[<h1 id="This-is-Tsglz"><a href="#This-is-Tsglz" class="headerlink" title="This is Tsglz"></a>This is Tsglz</h1><p>Welcome to my blogs</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
